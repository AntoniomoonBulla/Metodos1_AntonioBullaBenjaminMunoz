{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GbOTEdvgVodz"
      },
      "outputs": [],
      "source": [
        "import sympy as sym\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=sym.Symbol(\"x\",real=True)\n",
        "y=sym.Symbol(\"y\",real=True)\n",
        "z=x+sym.I*y\n",
        "f=z**3-1\n",
        "F = [sym.re(f),sym.im(f)]\n",
        "J=[[F[0].diff(x),F[0].diff(y)],[F[1].diff(x),F[1].diff(y)]]\n",
        "Fn = sym.lambdify([x,y],F,\"numpy\")\n",
        "J=sym.Matrix(J)\n",
        "print(J)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M9w6npPrXN_n",
        "outputId": "79a5af87-e64d-4053-8a7c-75011cd0f3fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix([[3*x**2 - 3*y**2, -6*x*y], [6*x*y, 3*x**2 - 3*y**2]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "z0=sym.Matrix(np.array([0.5,0.5]))\n",
        "\n",
        "def newton_raphson(z0,Fn,J):\n",
        "  z=[]\n",
        "  z.append(z0)\n",
        "  error=100000\n",
        "  i=1\n",
        "  while error>10**-7:\n",
        "    J_inversa=J.inv()\n",
        "    Fni=Fn(z[i-1][0],z[i-1][1])\n",
        "    J_inversa=J_inversa.subs(x,z[i-1][0])\n",
        "    J_inversa=J_inversa.subs(y,z[i-1][1])\n",
        "    Fni=sym.Matrix(np.array(Fn(z[i-1][0],z[i-1][1])))\n",
        "    z.append(z[i-1]-J_inversa*Fni)\n",
        "    e=z[i]-z[i-1]\n",
        "    error=e.dot(e)\n",
        "    i+=1\n",
        "  return z[-1]\n",
        "newton_raphson(z0,Fn,J)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 58
        },
        "id": "lakZ5fHOeHUn",
        "outputId": "0a4c071a-03fa-497d-fa4d-155fe36289dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Matrix([\n",
              "[-0.499999968662287],\n",
              "[ 0.866025431290392]])"
            ],
            "text/latex": "$\\displaystyle \\left[\\begin{matrix}-0.499999968662287\\\\0.866025431290392\\end{matrix}\\right]$"
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "N  = 50\n",
        "\n",
        "x1 = np.linspace(-1, 1, N)\n",
        "y1 = np.linspace(-1, 1, N)\n",
        "O=0\n",
        "for i in range(N): \n",
        "  z1=sym.Matrix(np.array([x1[i],y1[i]]))\n",
        "  resultado=newton_raphson(z1,Fn,J)\n",
        "  if resultado==[-0.5,np.sqrt(3)/2]:\n",
        "    O=20\n",
        "  elif resultado==[-0.5,-np.sqrt(3)/2]:\n",
        "    O=100\n",
        "  elif resultado==[1,0]:\n",
        "    O=255\n",
        "  Fractal = np.zeros((N,N), np.int64)\n",
        "  Fractal.fill(O)\n",
        "  plt.imshow(Fractal, cmap=\"coolwarm\" ,extent=[-1,1,-1,1])"
      ],
      "metadata": {
        "id": "vTyyXAO3m-ql",
        "outputId": "dd9d762c-ecda-4839-cbe4-9dd23203ce60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 435
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-Rq0lQz87iK4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qaf3bb6-7hfi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
